{"version":3,"sources":["data.yaml","random.ts","App.tsx","http.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","randomChoices","arr","n","length","max","options","slice","choices","i","Math","floor","random","push","splice","Tada","String","fromCodePoint","Container","styled","div","Title","h1","BigButton","button","CorrectButton","WrongButton","Prompt","h2","Mnemonic","h3","Summary","props","correct","answered","App","method","url","console","log","data","Promise","resolve","reject","req","XMLHttpRequest","withCredentials","addEventListener","status","open","send","then","yaml","load","response","responses","facts","map","fact","state","question","emptyQuestion","numCorrect","numAnswered","nextQuestion","catch","err","error","this","dir","otherResponses","filter","newState","answer","undefined","setState","r","buttons","hasAnswered","isCorrectAnswer","key","onClick","isWrongAnswer","handleClick","prompt","mnemonic","renderCard","renderMnemonic","React","Component","related","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,mC,oNCIpC,SAASC,EAAiBC,EAAUC,GACzC,GAAID,EAAIE,OAASD,EACf,OAAOD,EAIT,IAFA,IARiBG,EAQXC,EAAUJ,EAAIK,QACdC,EAAU,GACTA,EAAQJ,OAASD,GAAG,CACzB,IAAIM,GAXWJ,EAWGC,EAAQF,OAVrBM,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMN,KAW3CG,EAAQK,KAAKP,EAAQG,IACrBH,EAAQQ,OAAOL,EAAG,GAEpB,OAAOD,E,u0BCNT,IAAMO,EAAOC,OAAOC,cAAc,QAE5BC,EAAYC,IAAOC,IAAV,KAOTC,EAAQF,IAAOG,GAAV,KAMLC,EAAYJ,IAAOK,OAAV,KAKTC,EAAgBN,IAAOK,OAAV,KAMbE,EAAcP,IAAOK,OAAV,KAMXG,EAASR,IAAOS,GAAV,KAENC,EAAWV,IAAOW,GAAV,KAOd,SAASC,EAAQC,GACf,OACE,yCACYA,EAAMC,QAAQ,6BAD1B,aAEWD,EAAME,SAAS,8B,IA2BxBC,E,kDAWJ,WAAYH,GAAY,IAAD,EC5FGI,EAAgBC,ED4FnB,2BACrB,cAAML,GACNM,QAAQC,IAAI,cC9FYH,EDiGpB,MCjGoCC,EDiG7BG,IChGN,IAAIC,SAAwB,SAACC,EAASC,GAC3C,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAkB,EACtBF,EAAIG,iBAAiB,QAAQ,WACT,MAAfH,EAAII,OAAgBN,EAAQE,GAC1BD,EAAOC,MAEdA,EAAIG,iBAAiB,SAAS,WAAQJ,EAAOC,MAC7CA,EAAIG,iBAAiB,SAAS,WAAQJ,EAAOC,MAC7CA,EAAIK,KAAKb,EAAQC,GACjBO,EAAIM,WDsFaC,MAAK,SAACP,GACrB,IAAMJ,EAAOY,IAAKC,KAAKT,EAAIU,UACrBC,EAAYf,EAAKgB,MAAMC,KAAI,SAACC,GAAD,OAAgBA,EAAKJ,YACtD,EAAKK,MAAQ,CACXH,MAAOhB,EAAKgB,MACZD,UAAWA,EACXK,SAAUzB,EAAI0B,cAEdC,WAAY,EACZC,YAAa,GAEf,EAAKC,kBACJC,OAAM,SAACC,GAAD,OAAS5B,QAAQ6B,MAAMD,MAGhC,EAAKP,MAAQ,CACXH,MAAO,GACPD,UAAW,GACXK,SAAUzB,EAAI0B,cAEdC,WAAY,EACZC,YAAa,GA1BM,E,2DAgCrB,GADAzB,QAAQC,IAAI,yBACoB,IAA5B6B,KAAKT,MAAMH,MAAMpD,OAArB,CAIAkC,QAAQC,IAAI,6BACZD,QAAQ+B,IAAID,KAAKT,OACjB,IAAMD,EAAOzD,EAAcmE,KAAKT,MAAMH,MAAO,GAAG,GAC1CD,EAAY,CAACG,EAAKJ,UAClBgB,EAAiBF,KAAKT,MAAMJ,UAAUgB,QAAO,SAACjB,GAAD,OAAcA,IAAaI,EAAKJ,YACnFC,EAAU1C,KAAV,MAAA0C,EAAS,YAAStD,EAAcqE,EAAgB,KAChD,IDpHuBpE,ECoHjBsE,EAAW,CACfhB,MAAOY,KAAKT,MAAMH,MAClBD,UAAWa,KAAKT,MAAMJ,UACtBK,SAAU,CACRF,KAAMA,EACNH,WDzHmBrD,ECyHAqD,EDxHlBtD,EAAcC,EAAKA,EAAIE,UC0H1BqE,YAAQC,GAEVpC,QAAQC,IAAI,4BACZD,QAAQ+B,IAAIG,GACZJ,KAAKO,SAASH,QApBZlC,QAAQC,IAAI,gC,kCAuBJqC,GACV,GAA0B,OAAtBR,KAAKT,MAAMc,aAAyCC,IAAtBN,KAAKT,MAAMc,OAA7C,CACAL,KAAKO,SAAS,CACZF,OAAQG,IAEV,IAAMb,EAAcK,KAAKT,MAAMI,YAAc,EACzCD,EAAaM,KAAKT,MAAMG,WACxBc,IAAMR,KAAKT,MAAMC,SAASF,KAAKJ,UACjCQ,IAEFM,KAAKO,SAAS,CACZZ,YAAaA,EACbD,WAAYA,O,oCAKd,OAA6B,OAAtBM,KAAKT,MAAMc,aAAyCC,IAAtBN,KAAKT,MAAMc,S,sCAGlCnB,GACd,OAAOA,IAAac,KAAKT,MAAMC,SAASF,KAAKJ,W,oCAGjCA,GACZ,OAAOc,KAAKT,MAAMc,SAAWnB,GAAYA,IAAac,KAAKT,MAAMC,SAASF,KAAKJ,W,mCAGnE,IAAD,OACLuB,EAAUT,KAAKT,MAAMC,SAASL,UAAUE,KAAI,SAACH,EAAkB7C,GACnE,OAAI,EAAKqE,cACH,EAAKC,gBAAgBzB,GAErB,kBAAC7B,EAAD,CAAeuD,IAAKvE,EAAGwE,QAAS,kBAAM,EAAKjB,iBACxCV,GAGI,EAAK4B,cAAc5B,GAE1B,kBAAC5B,EAAD,CAAasD,IAAKvE,EAAGwE,QAAS,kBAAM,EAAKjB,iBACtCV,GAKL,kBAAC/B,EAAD,CAAWyD,IAAKvE,EAAGwE,QAAS,kBAAM,EAAKjB,iBACpCV,GAKH,kBAAC/B,EAAD,CAAWyD,IAAKvE,EAAGwE,QAAS,kBAAM,EAAKE,YAAY7B,KAChDA,MAKT,OACE,6BACE,kBAAC3B,EAAD,KACGyC,KAAKT,MAAMC,SAASF,KAAK0B,QAE3BP,K,uCAML,IAAKT,KAAKU,cAAe,OAAQ,kBAACjD,EAAD,MACjC,IAAIyB,EAAW,GAMf,OAJEA,EADEc,KAAKW,gBAAgBX,KAAKT,MAAMc,QAAU,IACjC1D,EAAOA,EAAOA,EAAO,aAAeA,EAAOA,EAAOA,EAElD,oBAAsBqD,KAAKT,MAAMC,SAASF,KAAK2B,SAG1D,kBAACxD,EAAD,KAAYyB,K,+BAKd,OACE,kBAACpC,EAAD,KACE,gCACE,kBAACG,EAAD,mCAIF,kBAACU,EAAD,CAASG,SAAWkC,KAAKT,MAAMI,YAAc9B,QAAUmC,KAAKT,MAAMG,aACjEM,KAAKkB,aACLlB,KAAKmB,sB,GA7JIC,IAAMC,WAAlBtD,EACG0B,cAAgB,CACrBH,KAAM,CACJ0B,OAAQ,GACR9B,SAAU,GACVoC,QAAS,GACTL,SAAU,IAEZ9B,UAAW,IA2JApB,QExOKwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdxC,OAAM,SAAAE,GACL7B,QAAQ6B,MAAMA,EAAMuC,c","file":"static/js/main.2f0af3e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.7afd0079.yaml\";","function randomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function randomChoices<T>(arr: T[], n: number): T[] {\n  if (arr.length < n) {\n    return arr;\n  }\n  const options = arr.slice();\n  const choices = [];\n  while (choices.length < n) {\n    let i = randomInt(options.length);\n    choices.push(options[i]);\n    options.splice(i, 1);\n  }\n  return choices;\n}\n\nexport function shuffle<T>(arr: T[]): T[] {\n  return randomChoices(arr, arr.length);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport yaml from 'js-yaml';\n\nimport xhr from './http';\nimport {shuffle, randomChoices} from './random';\n\nimport data from './data.yaml';\n\nconst Tada = String.fromCodePoint(127881);\n\nconst Container = styled.div`\n  @media screen and (min-width: 48rem) {\n  width: 48rem;\n  margin: 0 auto;\n  }\n`;\n\nconst Title = styled.h1`\n  padding-left: 1rem;\n  font-size: 1.5em;\n  color: palevioletred;\n`;\n\nconst BigButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n`;\n\nconst CorrectButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n  background-color: lightgreen;\n`;\n\nconst WrongButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n  background-color: orangered;\n`;\n\nconst Prompt = styled.h2``;\n\nconst Mnemonic = styled.h3``;\n\ninterface SummaryProps {\n  answered: number;\n  correct: number;\n}\n\nfunction Summary(props: SummaryProps) {\n  return (\n    <div>\n      Correct: {props.correct}<br />\n    Answered: {props.answered}<br />\n    </div>\n  )\n}\n\ninterface Fact {\n  prompt: string;\n  response: string;\n  related: string[];\n  mnemonic: string;\n}\n\ninterface Question {\n  fact: Fact;\n  responses: string[];\n}\n\ninterface AppState {\n  facts: Fact[];\n  responses: string[];\n  question: Question;\n  answer?: string;\n\n  numCorrect: number;\n  numAnswered: number;\n}\n\nclass App extends React.Component<{},AppState> {\n  static emptyQuestion = {\n    fact: {\n      prompt: '',\n      response: '',\n      related: [],\n      mnemonic: '',\n    },\n    responses: [],\n  };\n\n  constructor(props: {}) {\n    super(props);\n    console.log('new App()');\n\n    // Start async get call\n    xhr('GET', data).then((req) => {\n      const data = yaml.load(req.response);\n      const responses = data.facts.map((fact: Fact) => fact.response);\n      this.state = {\n        facts: data.facts,\n        responses: responses,\n        question: App.emptyQuestion,\n\n        numCorrect: 0,\n        numAnswered: 0,\n      };\n      this.nextQuestion();\n    }).catch((err) => console.error(err));\n\n    // Initialize empty state while we wait for the xhr to finish\n    this.state = {\n      facts: [],\n      responses: [],\n      question: App.emptyQuestion,\n\n      numCorrect: 0,\n      numAnswered: 0,\n    };\n  }\n  \n  nextQuestion() {\n    console.log('nextQuestion() called');\n    if (this.state.facts.length === 0) {\n      console.log('nextQuestion() empty facts');\n      return\n    }\n    console.log('nextQuestion() this.state');\n    console.dir(this.state);\n    const fact = randomChoices(this.state.facts, 1)[0];\n    const responses = [fact.response];\n    const otherResponses = this.state.responses.filter((response) => response !== fact.response);\n    responses.push(...randomChoices(otherResponses, 3));\n    const newState = {\n      facts: this.state.facts,\n      responses: this.state.responses,\n      question: {\n        fact: fact,\n        responses: shuffle(responses),\n      },\n      answer: undefined,\n    };\n    console.log('nextQuestion() new state');\n    console.dir(newState);\n    this.setState(newState);\n  }\n\n  handleClick(r: string) {\n    if (this.state.answer !== null && this.state.answer !== undefined) return;\n    this.setState({\n      answer: r,\n    });\n    const numAnswered = this.state.numAnswered + 1;\n    let numCorrect = this.state.numCorrect;\n    if (r === this.state.question.fact.response) {\n      numCorrect++;\n    }\n    this.setState({\n      numAnswered: numAnswered,\n      numCorrect: numCorrect,\n    });\n  }\n\n  hasAnswered() {\n    return this.state.answer !== null && this.state.answer !== undefined;\n  }\n\n  isCorrectAnswer(response: string) {\n    return response === this.state.question.fact.response;\n  }\n\n  isWrongAnswer(response: string) {\n    return this.state.answer === response && response !== this.state.question.fact.response;\n  }\n\n  renderCard() {\n    const buttons = this.state.question.responses.map((response: string, i: number) => {\n      if (this.hasAnswered()) {\n        if (this.isCorrectAnswer(response)) {\n          return (\n            <CorrectButton key={i} onClick={() => this.nextQuestion()}>\n              {response}\n            </CorrectButton>\n          );\n        } else if (this.isWrongAnswer(response)) {\n          return (\n            <WrongButton key={i} onClick={() => this.nextQuestion()}>\n              {response}\n            </WrongButton>\n          );\n        }\n        return (\n          <BigButton key={i} onClick={() => this.nextQuestion()}>\n            {response}\n          </BigButton>\n        );\n      } else {\n        return (\n          <BigButton key={i} onClick={() => this.handleClick(response)}>\n            {response}\n          </BigButton>\n        );\n      }\n    });\n    return (\n      <div>\n        <Prompt>\n          {this.state.question.fact.prompt}\n        </Prompt>\n        {buttons}\n      </div>\n    );\n  }\n\n  renderMnemonic() {\n    if (!this.hasAnswered()) return (<Mnemonic />);\n    let response = '';\n    if (this.isCorrectAnswer(this.state.answer || '')) {\n      response = Tada + Tada + Tada + 'Great job!' + Tada + Tada + Tada;\n    } else {\n      response = 'Try to remember: ' + this.state.question.fact.mnemonic;\n    }\n    return (\n      <Mnemonic>{ response }</Mnemonic>\n    );\n  }\n\n  render() {\n    return (\n      <Container>\n        <header>\n          <Title>\n            S.R.S. 日本語\n          </Title>\n        </header>\n        <Summary answered={ this.state.numAnswered } correct={ this.state.numCorrect } />\n        {this.renderCard()}\n        {this.renderMnemonic()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","export default function xhr(method: string, url: string): Promise<XMLHttpRequest> {\n  return new Promise<XMLHttpRequest>((resolve, reject) => {\n    const req = new XMLHttpRequest();\n    req.withCredentials = true;\n    req.addEventListener('load', () => {\n      if(req.status === 200) resolve(req);\n      else reject(req);\n    });\n    req.addEventListener('error', () => { reject(req) });\n    req.addEventListener('abort', () => { reject(req) });\n    req.open(method, url);\n    req.send();\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
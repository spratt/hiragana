{"version":3,"sources":["data.yaml","random.ts","QuestionPicker.tsx","App.tsx","http.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","randomChoices","arr","n","length","max","options","slice","choices","i","Math","floor","random","push","splice","shuffle","EndOfTime","Date","NullQuestionPicker","s","b","SimpleSRSQuestionPicker","prompts","promptValues","this","map","prompt","value","pvs","filter","pv","correct","nullablePV","findPromptValue","sort","pv1","pv2","console","dir","Tada","String","fromCodePoint","Container","styled","div","Title","h1","BigButton","button","CorrectButton","WrongButton","Prompt","h2","Mnemonic","h3","Summary","props","answered","App","method","url","questionPicker","mounted","log","data","Promise","resolve","reject","req","XMLHttpRequest","withCredentials","addEventListener","status","open","send","then","yaml","load","response","setQuestions","facts","catch","err","error","state","responses","question","emptyQuestion","maxQuestions","numCorrect","numAnswered","seenSet","Object","keys","newState","setState","nextQuestion","isReady","key","fact","otherResponses","newSeenSet","_","answer","undefined","r","feedback","buttons","hasAnswered","isCorrectAnswer","onClick","isWrongAnswer","handleClick","mnemonic","numSeen","numTotal","decMaxQuestions","incMaxQuestions","renderCard","renderMnemonic","React","Component","related","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.69959f46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.f9e1437d.yaml\";","function randomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function randomChoices<T>(arr: T[], n: number): T[] {\n  if (arr.length < n) {\n    return arr;\n  }\n  const options = arr.slice();\n  const choices = [];\n  while (choices.length < n) {\n    let i = randomInt(options.length);\n    choices.push(options[i]);\n    options.splice(i, 1);\n  }\n  return choices;\n}\n\nexport function shuffle<T>(arr: T[]): T[] {\n  return randomChoices(arr, arr.length);\n}\n","import {shuffle,randomChoices} from './random';\n\nexport const EndOfTime = new Date(8640000000000000);\n\nexport interface QuestionPicker {\n  nextQuestion(): string;\n  feedback(s: string, b: boolean): void;\n\n  isReady(): boolean;\n  whenReady(): Date;\n}\n\nexport class NullQuestionPicker implements QuestionPicker {\n  nextQuestion() { return \"Not implemented\" }\n  feedback(s: string, b: boolean) {}\n  \n  isReady() { return false }\n  whenReady() { return EndOfTime }\n}\n\nexport type NonEmptyArray<T> = [T, ...T[]];\n\nexport class RandomQuestionPicker implements QuestionPicker {\n  private prompts: NonEmptyArray<string>;\n\n  constructor(prompts: NonEmptyArray<string>) {\n    this.prompts = (shuffle(prompts) as NonEmptyArray<string>);\n  }\n\n  nextQuestion(): string {\n    return randomChoices(this.prompts, 1)[0];\n  }\n\n  feedback(s: string, b: boolean) {\n    console.log(`RandomQuestionPicker.feedback(s = ${s}, b = ${b})`);\n  }\n\n  isReady() { return true }\n  whenReady() { return new Date() }\n}\n\ninterface PromptValue {\n  prompt: string;\n  value: number;\n}\n\nexport class SimpleSRSQuestionPicker implements QuestionPicker {\n  private promptValues: PromptValue[];\n\n  constructor(prompts: NonEmptyArray<string>) {\n    this.promptValues = shuffle(prompts).map((prompt) => {\n      return {\n        prompt: prompt,\n        value: 1,\n      };\n    });\n  }\n\n  nextQuestion(): string {\n    return this.promptValues[0].prompt;\n  }\n\n  findPromptValue(s: string): PromptValue | null {\n    const pvs= this.promptValues.filter((pv) => pv.prompt === s);\n    if (pvs.length === 0) return null;\n    return pvs[0];\n  }\n\n  feedback(s: string, correct: boolean) {\n    const nullablePV = this.findPromptValue(s);\n    if (nullablePV === null) return;\n    const pv: PromptValue = nullablePV as PromptValue;\n    if (correct) pv.value *= 1.1;\n    else pv.value *= 0.9;\n    this.promptValues.sort((pv1, pv2) => {\n      return pv1.value - pv2.value;\n    });\n    console.dir(this.promptValues);\n  }\n\n  isReady() { return true }\n  whenReady() { return new Date() }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport yaml from 'js-yaml';\nimport * as _ from 'lodash';\n\nimport xhr from './http';\nimport {shuffle, randomChoices} from './random';\nimport {NonEmptyArray, QuestionPicker, NullQuestionPicker, SimpleSRSQuestionPicker} from './QuestionPicker';\n\nimport data from './data.yaml';\n\nconst Tada = String.fromCodePoint(127881);\n\nconst Container = styled.div`\n  @media screen and (min-width: 48rem) {\n  width: 48rem;\n  margin: 0 auto;\n  }\n`;\n\nconst Title = styled.h1`\n  padding-left: 1rem;\n  font-size: 1.5em;\n  color: palevioletred;\n`;\n\nconst BigButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n`;\n\nconst CorrectButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n  background-color: lightgreen;\n`;\n\nconst WrongButton = styled.button`\n  font-size: 2rem;\n  width: 100%;\n  background-color: orangered;\n`;\n\nconst Prompt = styled.h2``;\n\nconst Mnemonic = styled.h3``;\n\ninterface SummaryProps {\n  answered: number;\n  correct: number;\n}\n\nfunction Summary(props: SummaryProps) {\n  return (\n    <div>\n      <div>Correct: {props.correct}</div>\n      <div>Answered: {props.answered}</div>\n    </div>\n  )\n}\n\ninterface Fact {\n  prompt: string;\n  response: string;\n  related: string[];\n  mnemonic: string;\n}\n\ninterface Question {\n  fact: Fact;\n  responses: string[];\n}\n\ninterface AppState {\n  facts: Record<string,Fact>;\n  responses: string[];\n  question: Question;\n  maxQuestions: number;\n  answer?: string;\n\n  numCorrect: number;\n  numAnswered: number;\n  seenSet: Record<string,{}>;\n}\n\nclass App extends React.Component<{},AppState> {\n  private questionPicker: QuestionPicker;\n  private mounted: boolean = false;\n  \n  static emptyQuestion = {\n    fact: {\n      prompt: '',\n      response: '',\n      related: [],\n      mnemonic: '',\n    },\n    responses: [],\n  };\n\n  constructor(props: {}) {\n    super(props);\n    console.log('new App()');\n\n    this.questionPicker = new NullQuestionPicker();\n\n    // Start async get call\n    xhr('GET', data).then((req) => {\n      const maxQuestions = 30;\n      const data = yaml.load(req.response);\n      this.setQuestions(maxQuestions, data.facts);\n    }).catch((err) => console.error(err));\n\n    // Initialize empty state while we wait for the xhr to finish\n    this.state = {\n      facts: {},\n      responses: [],\n      question: App.emptyQuestion,\n      maxQuestions: 0,\n\n      numCorrect: 0,\n      numAnswered: 0,\n      seenSet: {},\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  decMaxQuestions() {\n    if (this.state.maxQuestions - 1 < 4) return;\n    this.setQuestions(this.state.maxQuestions - 1, this.state.facts);\n  }\n\n  incMaxQuestions() {\n    if (this.state.maxQuestions + 1 > Object.keys(this.state.facts).length) return;\n    this.setQuestions(this.state.maxQuestions + 1, this.state.facts);\n  }\n\n  setQuestions(maxQuestions: number, facts: Record<string,Fact>) {\n    const prompts = Object.keys(facts).slice(0, maxQuestions)\n    this.questionPicker = new SimpleSRSQuestionPicker(prompts as NonEmptyArray<string>);\n    const responses = prompts.map((prompt: string) => facts[prompt].response);\n    if (this.mounted) {\n      const newState = {\n        facts: facts,\n        responses: responses,\n        question: App.emptyQuestion,\n        maxQuestions: maxQuestions,\n        seenSet: {},\n      };\n      this.setState(newState);\n    } else {\n      // eslint-disable-next-line\n      this.state = {\n        facts: facts,\n        responses: responses,\n        question: App.emptyQuestion,\n        maxQuestions: maxQuestions,\n\n        numCorrect: this.state.numCorrect,\n        numAnswered: this.state.numAnswered,\n        seenSet: {},\n      };\n    }\n    this.nextQuestion({});\n  }\n  \n  nextQuestion(seenSet: Record<string,{}>) {\n    if (Object.keys(this.state.facts).length === 0) {\n      return\n    }\n    if (!this.questionPicker.isReady()) {\n      return;\n    }\n    const key = this.questionPicker.nextQuestion();\n    const fact = this.state.facts[key];\n    const responses = [fact.response];\n    const otherResponses = this.state.responses.filter((response) => response !== fact.response);\n    responses.push(...randomChoices(otherResponses, 3));\n    const newSeenSet = _.clone(seenSet);\n    newSeenSet[fact.prompt] = {};\n\n    if (this.mounted) {\n      this.setState({\n        question: {\n          fact: fact,\n          responses: shuffle(responses),\n        },\n        answer: undefined,\n        seenSet: newSeenSet,\n      });\n    } else {\n      // eslint-disable-next-line\n      this.state = {\n        facts: this.state.facts,\n        responses: this.state.responses,\n        question: {\n          fact: fact,\n          responses: shuffle(responses),\n        },\n        maxQuestions: this.state.maxQuestions,\n\n        numCorrect: this.state.numCorrect,\n        numAnswered: this.state.numAnswered,\n        seenSet: newSeenSet,\n        answer: undefined,\n      };\n    }\n  }\n\n  handleClick(r: string) {\n    if (this.state.answer !== null && this.state.answer !== undefined) return;\n    this.setState({\n      answer: r,\n    });\n    const numAnswered = this.state.numAnswered + 1;\n    let numCorrect = this.state.numCorrect;\n    if (r === this.state.question.fact.response) {\n      this.questionPicker.feedback(this.state.question.fact.prompt, true);\n      numCorrect++;\n    } else {\n      this.questionPicker.feedback(this.state.question.fact.prompt, false);\n    }\n    this.setState({\n      numAnswered: numAnswered,\n      numCorrect: numCorrect,\n    });\n  }\n\n  hasAnswered() {\n    return this.state.answer !== null && this.state.answer !== undefined;\n  }\n\n  isCorrectAnswer(response: string) {\n    return response === this.state.question.fact.response;\n  }\n\n  isWrongAnswer(response: string) {\n    return this.state.answer === response && response !== this.state.question.fact.response;\n  }\n\n  renderCard() {\n    const buttons = this.state.question.responses.map((response: string, i: number) => {\n      if (this.hasAnswered()) {\n        if (this.isCorrectAnswer(response)) {\n          return (\n            <CorrectButton key={i} onClick={() => this.nextQuestion(this.state.seenSet)}>\n              {response}\n            </CorrectButton>\n          );\n        } else if (this.isWrongAnswer(response)) {\n          return (\n            <WrongButton key={i} onClick={() => this.nextQuestion(this.state.seenSet)}>\n              {response}\n            </WrongButton>\n          );\n        }\n        return (\n          <BigButton key={i} onClick={() => this.nextQuestion(this.state.seenSet)}>\n            {response}\n          </BigButton>\n        );\n      } else {\n        return (\n          <BigButton key={i} onClick={() => this.handleClick(response)}>\n            {response}\n          </BigButton>\n        );\n      }\n    });\n    return (\n      <div>\n        <Prompt>\n          {this.state.question.fact.prompt}\n        </Prompt>\n        {buttons}\n      </div>\n    );\n  }\n\n  renderMnemonic() {\n    if (!this.hasAnswered()) return (<Mnemonic />);\n    let response = '';\n    if (this.isCorrectAnswer(this.state.answer || '')) {\n      response = Tada + Tada + Tada + 'Great job!' + Tada + Tada + Tada;\n    } else {\n      response = 'Try to remember: ' + this.state.question.fact.mnemonic;\n    }\n    return (\n      <Mnemonic>{ response }</Mnemonic>\n    );\n  }\n\n  render() {\n    const numSeen = Object.keys(this.state.seenSet).length;\n    const numTotal = Object.keys(this.state.facts).length;\n    return (\n      <Container>\n        <header>\n          <Title>\n            S.R.S. 日本語\n          </Title>\n        </header>\n        <Summary\n          answered={ this.state.numAnswered }\n          correct={ this.state.numCorrect }\n        />\n        <div>\n          <span>Seen { numSeen } / </span>\n          <button onClick={() => this.decMaxQuestions()}>-</button>\n          <span>{ this.state.maxQuestions }</span>\n          <button onClick={() => this.incMaxQuestions()}>+</button>\n          <span> / { numTotal } total</span>\n        </div>\n        {this.renderCard()}\n        {this.renderMnemonic()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","export default function xhr(method: string, url: string): Promise<XMLHttpRequest> {\n  return new Promise<XMLHttpRequest>((resolve, reject) => {\n    const req = new XMLHttpRequest();\n    req.withCredentials = true;\n    req.addEventListener('load', () => {\n      if(req.status === 200) resolve(req);\n      else reject(req);\n    });\n    req.addEventListener('error', () => { reject(req) });\n    req.addEventListener('abort', () => { reject(req) });\n    req.open(method, url);\n    req.send();\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
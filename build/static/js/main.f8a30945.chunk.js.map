{"version":3,"sources":["data.yaml","http.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","get","url","method","Promise","resolve","reject","req","XMLHttpRequest","withCredentials","addEventListener","status","open","send","xhr","Container","styled","div","Title","h1","StartButton","console","log","Button","button","onClick","handleClick","React","Component","App","props","data","then","yaml","load","response","dir","state","catch","err","error","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,mC,6NCe5B,SAASC,EAAIC,GAC1B,OAhBK,SAAaC,EAAgBD,GAClC,OAAO,IAAIE,SAAwB,SAACC,EAASC,GAC3C,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAkB,EACtBF,EAAIG,iBAAiB,QAAQ,WACT,MAAfH,EAAII,OAAgBN,EAAQE,GAC1BD,EAAOC,MAEdA,EAAIG,iBAAiB,SAAS,WAAQJ,EAAOC,MAC7CA,EAAIG,iBAAiB,SAAS,WAAQJ,EAAOC,MAC7CA,EAAIK,KAAKT,EAAQD,GACjBK,EAAIM,UAKCC,CAAI,MAAOZ,G,8WCVpB,IAAMa,EAAYC,IAAOC,IAAV,KAOTC,EAAQF,IAAOG,GAAV,KAKLC,E,4KAEFC,QAAQC,IAAI,W,+BAEJ,IAAD,OACDC,EAASP,IAAOQ,OAAV,KAGZ,OACE,kBAACD,EAAD,CAAQE,QAAS,kBAAM,EAAKC,gBAA5B,a,GAToBC,IAAMC,WA2CjBC,E,kDA1Bb,WAAYC,GAAgB,IAAD,6BACzB,cAAMA,GAEN7B,EAAI8B,KAAMC,MAAK,SAACzB,GACd,IAAMwB,EAAOE,IAAKC,KAAK3B,EAAI4B,UAC3Bd,QAAQe,IAAIL,GACZ,EAAKM,MAAQN,KACZO,OAAM,SAACC,GAAD,OAASlB,QAAQmB,MAAMD,MAPP,E,qDAWzB,OACE,kBAACxB,EAAD,CAAW0B,UAAU,OACnB,gCACE,kBAACvB,EAAD,mCAIF,iCACE,kBAAC,EAAD,Y,GApBQS,IAAMC,WCtBJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAE,GACLnB,QAAQmB,MAAMA,EAAMiB,c","file":"static/js/main.f8a30945.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.08e81016.yaml\";","export function xhr(method: string, url: string): Promise<XMLHttpRequest> {\n  return new Promise<XMLHttpRequest>((resolve, reject) => {\n    const req = new XMLHttpRequest();\n    req.withCredentials = true;\n    req.addEventListener('load', () => {\n      if(req.status === 200) resolve(req);\n      else reject(req);\n    });\n    req.addEventListener('error', () => { reject(req) });\n    req.addEventListener('abort', () => { reject(req) });\n    req.open(method, url);\n    req.send();\n  });\n}\n\nexport default function get(url: string): Promise<XMLHttpRequest> {\n  return xhr('GET', url);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport yaml from 'js-yaml';\nimport data from './data.yaml';\nimport get from './http';\n\nconst Container = styled.div`\n  @media screen and (min-width: 48rem) {\n  width: 48rem;\n  margin: 0 auto;\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 1.5em;\n  color: palevioletred;\n`;\n\nclass StartButton extends React.Component {\n  handleClick() {\n    console.log('click');\n  }\n  render() {\n    const Button = styled.button`\n      width: 100%;\n    `;\n    return (\n      <Button onClick={() => this.handleClick()}>\n        Start\n      </Button>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props: object) {\n    super(props);\n\n    get(data).then((req) => {\n      const data = yaml.load(req.response);\n      console.dir(data);\n      this.state = data;\n    }).catch((err) => console.error(err));\n  }\n\n  render() {\n    return (\n      <Container className=\"App\">\n        <header>\n          <Title>\n            S.R.S. 日本語\n          </Title>\n        </header>\n        <article>\n          <StartButton />\n        </article>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}